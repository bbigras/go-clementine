// Code generated by protoc-gen-go.
// source: remotecontrolmessages.proto
// DO NOT EDIT!

package pb_remote

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// The supported message types
type MsgType int32

const (
	MsgType_UNKNOWN MsgType = 0
	// Messages generally send from client to server
	MsgType_CONNECT                MsgType = 1
	MsgType_REQUEST_PLAYLISTS      MsgType = 3
	MsgType_REQUEST_PLAYLIST_SONGS MsgType = 4
	MsgType_CHANGE_SONG            MsgType = 5
	MsgType_SET_VOLUME             MsgType = 6
	MsgType_SET_TRACK_POSITION     MsgType = 7
	MsgType_INSERT_URLS            MsgType = 8
	MsgType_REMOVE_SONGS           MsgType = 9
	MsgType_OPEN_PLAYLIST          MsgType = 10
	MsgType_CLOSE_PLAYLIST         MsgType = 11
	MsgType_GET_LYRICS             MsgType = 14
	MsgType_DOWNLOAD_SONGS         MsgType = 15
	MsgType_SONG_OFFER_RESPONSE    MsgType = 16
	// Lastfm
	MsgType_LOVE        MsgType = 12
	MsgType_BAN         MsgType = 13
	MsgType_STOP_AFTER  MsgType = 17
	MsgType_GET_LIBRARY MsgType = 18
	MsgType_RATE_SONG   MsgType = 19
	// Messages send by both
	MsgType_DISCONNECT       MsgType = 2
	MsgType_PLAY             MsgType = 20
	MsgType_PLAYPAUSE        MsgType = 21
	MsgType_PAUSE            MsgType = 22
	MsgType_STOP             MsgType = 23
	MsgType_NEXT             MsgType = 24
	MsgType_PREVIOUS         MsgType = 25
	MsgType_SHUFFLE_PLAYLIST MsgType = 26
	// Messages that contain the repeat or random mode
	// Either set by client or clementine
	MsgType_REPEAT  MsgType = 27
	MsgType_SHUFFLE MsgType = 28
	// Messages send from server to client
	MsgType_INFO                     MsgType = 40
	MsgType_CURRENT_METAINFO         MsgType = 41
	MsgType_PLAYLISTS                MsgType = 42
	MsgType_PLAYLIST_SONGS           MsgType = 43
	MsgType_ENGINE_STATE_CHANGED     MsgType = 44
	MsgType_KEEP_ALIVE               MsgType = 45
	MsgType_UPDATE_TRACK_POSITION    MsgType = 46
	MsgType_ACTIVE_PLAYLIST_CHANGED  MsgType = 47
	MsgType_FIRST_DATA_SENT_COMPLETE MsgType = 48
	MsgType_LYRICS                   MsgType = 49
	MsgType_SONG_FILE_CHUNK          MsgType = 50
	MsgType_DOWNLOAD_QUEUE_EMPTY     MsgType = 51
	MsgType_LIBRARY_CHUNK            MsgType = 52
)

var MsgType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CONNECT",
	3:  "REQUEST_PLAYLISTS",
	4:  "REQUEST_PLAYLIST_SONGS",
	5:  "CHANGE_SONG",
	6:  "SET_VOLUME",
	7:  "SET_TRACK_POSITION",
	8:  "INSERT_URLS",
	9:  "REMOVE_SONGS",
	10: "OPEN_PLAYLIST",
	11: "CLOSE_PLAYLIST",
	14: "GET_LYRICS",
	15: "DOWNLOAD_SONGS",
	16: "SONG_OFFER_RESPONSE",
	12: "LOVE",
	13: "BAN",
	17: "STOP_AFTER",
	18: "GET_LIBRARY",
	19: "RATE_SONG",
	2:  "DISCONNECT",
	20: "PLAY",
	21: "PLAYPAUSE",
	22: "PAUSE",
	23: "STOP",
	24: "NEXT",
	25: "PREVIOUS",
	26: "SHUFFLE_PLAYLIST",
	27: "REPEAT",
	28: "SHUFFLE",
	40: "INFO",
	41: "CURRENT_METAINFO",
	42: "PLAYLISTS",
	43: "PLAYLIST_SONGS",
	44: "ENGINE_STATE_CHANGED",
	45: "KEEP_ALIVE",
	46: "UPDATE_TRACK_POSITION",
	47: "ACTIVE_PLAYLIST_CHANGED",
	48: "FIRST_DATA_SENT_COMPLETE",
	49: "LYRICS",
	50: "SONG_FILE_CHUNK",
	51: "DOWNLOAD_QUEUE_EMPTY",
	52: "LIBRARY_CHUNK",
}
var MsgType_value = map[string]int32{
	"UNKNOWN":                  0,
	"CONNECT":                  1,
	"REQUEST_PLAYLISTS":        3,
	"REQUEST_PLAYLIST_SONGS":   4,
	"CHANGE_SONG":              5,
	"SET_VOLUME":               6,
	"SET_TRACK_POSITION":       7,
	"INSERT_URLS":              8,
	"REMOVE_SONGS":             9,
	"OPEN_PLAYLIST":            10,
	"CLOSE_PLAYLIST":           11,
	"GET_LYRICS":               14,
	"DOWNLOAD_SONGS":           15,
	"SONG_OFFER_RESPONSE":      16,
	"LOVE":                     12,
	"BAN":                      13,
	"STOP_AFTER":               17,
	"GET_LIBRARY":              18,
	"RATE_SONG":                19,
	"DISCONNECT":               2,
	"PLAY":                     20,
	"PLAYPAUSE":                21,
	"PAUSE":                    22,
	"STOP":                     23,
	"NEXT":                     24,
	"PREVIOUS":                 25,
	"SHUFFLE_PLAYLIST":         26,
	"REPEAT":                   27,
	"SHUFFLE":                  28,
	"INFO":                     40,
	"CURRENT_METAINFO":         41,
	"PLAYLISTS":                42,
	"PLAYLIST_SONGS":           43,
	"ENGINE_STATE_CHANGED":     44,
	"KEEP_ALIVE":               45,
	"UPDATE_TRACK_POSITION":    46,
	"ACTIVE_PLAYLIST_CHANGED":  47,
	"FIRST_DATA_SENT_COMPLETE": 48,
	"LYRICS":                   49,
	"SONG_FILE_CHUNK":          50,
	"DOWNLOAD_QUEUE_EMPTY":     51,
	"LIBRARY_CHUNK":            52,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}
func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}

// Valid Engine states
type EngineState int32

const (
	EngineState_Empty   EngineState = 0
	EngineState_Idle    EngineState = 1
	EngineState_Playing EngineState = 2
	EngineState_Paused  EngineState = 3
)

var EngineState_name = map[int32]string{
	0: "Empty",
	1: "Idle",
	2: "Playing",
	3: "Paused",
}
var EngineState_value = map[string]int32{
	"Empty":   0,
	"Idle":    1,
	"Playing": 2,
	"Paused":  3,
}

func (x EngineState) Enum() *EngineState {
	p := new(EngineState)
	*p = x
	return p
}
func (x EngineState) String() string {
	return proto.EnumName(EngineState_name, int32(x))
}
func (x *EngineState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EngineState_value, data, "EngineState")
	if err != nil {
		return err
	}
	*x = EngineState(value)
	return nil
}

// Valid Repeatmodes
type RepeatMode int32

const (
	RepeatMode_Repeat_Off      RepeatMode = 0
	RepeatMode_Repeat_Track    RepeatMode = 1
	RepeatMode_Repeat_Album    RepeatMode = 2
	RepeatMode_Repeat_Playlist RepeatMode = 3
)

var RepeatMode_name = map[int32]string{
	0: "Repeat_Off",
	1: "Repeat_Track",
	2: "Repeat_Album",
	3: "Repeat_Playlist",
}
var RepeatMode_value = map[string]int32{
	"Repeat_Off":      0,
	"Repeat_Track":    1,
	"Repeat_Album":    2,
	"Repeat_Playlist": 3,
}

func (x RepeatMode) Enum() *RepeatMode {
	p := new(RepeatMode)
	*p = x
	return p
}
func (x RepeatMode) String() string {
	return proto.EnumName(RepeatMode_name, int32(x))
}
func (x *RepeatMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RepeatMode_value, data, "RepeatMode")
	if err != nil {
		return err
	}
	*x = RepeatMode(value)
	return nil
}

// Valid Shuffle modes
type ShuffleMode int32

const (
	ShuffleMode_Shuffle_Off         ShuffleMode = 0
	ShuffleMode_Shuffle_All         ShuffleMode = 1
	ShuffleMode_Shuffle_InsideAlbum ShuffleMode = 2
	ShuffleMode_Shuffle_Albums      ShuffleMode = 3
)

var ShuffleMode_name = map[int32]string{
	0: "Shuffle_Off",
	1: "Shuffle_All",
	2: "Shuffle_InsideAlbum",
	3: "Shuffle_Albums",
}
var ShuffleMode_value = map[string]int32{
	"Shuffle_Off":         0,
	"Shuffle_All":         1,
	"Shuffle_InsideAlbum": 2,
	"Shuffle_Albums":      3,
}

func (x ShuffleMode) Enum() *ShuffleMode {
	p := new(ShuffleMode)
	*p = x
	return p
}
func (x ShuffleMode) String() string {
	return proto.EnumName(ShuffleMode_name, int32(x))
}
func (x *ShuffleMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShuffleMode_value, data, "ShuffleMode")
	if err != nil {
		return err
	}
	*x = ShuffleMode(value)
	return nil
}

// Respone, why the connection was closed
type ReasonDisconnect int32

const (
	ReasonDisconnect_Server_Shutdown    ReasonDisconnect = 1
	ReasonDisconnect_Wrong_Auth_Code    ReasonDisconnect = 2
	ReasonDisconnect_Not_Authenticated  ReasonDisconnect = 3
	ReasonDisconnect_Download_Forbidden ReasonDisconnect = 4
)

var ReasonDisconnect_name = map[int32]string{
	1: "Server_Shutdown",
	2: "Wrong_Auth_Code",
	3: "Not_Authenticated",
	4: "Download_Forbidden",
}
var ReasonDisconnect_value = map[string]int32{
	"Server_Shutdown":    1,
	"Wrong_Auth_Code":    2,
	"Not_Authenticated":  3,
	"Download_Forbidden": 4,
}

func (x ReasonDisconnect) Enum() *ReasonDisconnect {
	p := new(ReasonDisconnect)
	*p = x
	return p
}
func (x ReasonDisconnect) String() string {
	return proto.EnumName(ReasonDisconnect_name, int32(x))
}
func (x *ReasonDisconnect) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReasonDisconnect_value, data, "ReasonDisconnect")
	if err != nil {
		return err
	}
	*x = ReasonDisconnect(value)
	return nil
}

// Message request for downloading songs
type DownloadItem int32

const (
	DownloadItem_CurrentItem DownloadItem = 1
	DownloadItem_ItemAlbum   DownloadItem = 2
	DownloadItem_APlaylist   DownloadItem = 3
)

var DownloadItem_name = map[int32]string{
	1: "CurrentItem",
	2: "ItemAlbum",
	3: "APlaylist",
}
var DownloadItem_value = map[string]int32{
	"CurrentItem": 1,
	"ItemAlbum":   2,
	"APlaylist":   3,
}

func (x DownloadItem) Enum() *DownloadItem {
	p := new(DownloadItem)
	*p = x
	return p
}
func (x DownloadItem) String() string {
	return proto.EnumName(DownloadItem_name, int32(x))
}
func (x *DownloadItem) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DownloadItem_value, data, "DownloadItem")
	if err != nil {
		return err
	}
	*x = DownloadItem(value)
	return nil
}

// Song Metadata
type SongMetadata struct {
	Id               *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Index            *int32   `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Title            *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Album            *string  `protobuf:"bytes,4,opt,name=album" json:"album,omitempty"`
	Artist           *string  `protobuf:"bytes,5,opt,name=artist" json:"artist,omitempty"`
	Albumartist      *string  `protobuf:"bytes,6,opt,name=albumartist" json:"albumartist,omitempty"`
	Track            *int32   `protobuf:"varint,7,opt,name=track" json:"track,omitempty"`
	Disc             *int32   `protobuf:"varint,8,opt,name=disc" json:"disc,omitempty"`
	PrettyYear       *string  `protobuf:"bytes,9,opt,name=pretty_year" json:"pretty_year,omitempty"`
	Genre            *string  `protobuf:"bytes,10,opt,name=genre" json:"genre,omitempty"`
	Playcount        *int32   `protobuf:"varint,11,opt,name=playcount" json:"playcount,omitempty"`
	PrettyLength     *string  `protobuf:"bytes,12,opt,name=pretty_length" json:"pretty_length,omitempty"`
	Art              []byte   `protobuf:"bytes,13,opt,name=art" json:"art,omitempty"`
	Length           *int32   `protobuf:"varint,14,opt,name=length" json:"length,omitempty"`
	IsLocal          *bool    `protobuf:"varint,15,opt,name=is_local" json:"is_local,omitempty"`
	Filename         *string  `protobuf:"bytes,16,opt,name=filename" json:"filename,omitempty"`
	FileSize         *int32   `protobuf:"varint,17,opt,name=file_size" json:"file_size,omitempty"`
	Rating           *float32 `protobuf:"fixed32,18,opt,name=rating" json:"rating,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SongMetadata) Reset()         { *m = SongMetadata{} }
func (m *SongMetadata) String() string { return proto.CompactTextString(m) }
func (*SongMetadata) ProtoMessage()    {}

func (m *SongMetadata) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SongMetadata) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *SongMetadata) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *SongMetadata) GetAlbum() string {
	if m != nil && m.Album != nil {
		return *m.Album
	}
	return ""
}

func (m *SongMetadata) GetArtist() string {
	if m != nil && m.Artist != nil {
		return *m.Artist
	}
	return ""
}

func (m *SongMetadata) GetAlbumartist() string {
	if m != nil && m.Albumartist != nil {
		return *m.Albumartist
	}
	return ""
}

func (m *SongMetadata) GetTrack() int32 {
	if m != nil && m.Track != nil {
		return *m.Track
	}
	return 0
}

func (m *SongMetadata) GetDisc() int32 {
	if m != nil && m.Disc != nil {
		return *m.Disc
	}
	return 0
}

func (m *SongMetadata) GetPrettyYear() string {
	if m != nil && m.PrettyYear != nil {
		return *m.PrettyYear
	}
	return ""
}

func (m *SongMetadata) GetGenre() string {
	if m != nil && m.Genre != nil {
		return *m.Genre
	}
	return ""
}

func (m *SongMetadata) GetPlaycount() int32 {
	if m != nil && m.Playcount != nil {
		return *m.Playcount
	}
	return 0
}

func (m *SongMetadata) GetPrettyLength() string {
	if m != nil && m.PrettyLength != nil {
		return *m.PrettyLength
	}
	return ""
}

func (m *SongMetadata) GetArt() []byte {
	if m != nil {
		return m.Art
	}
	return nil
}

func (m *SongMetadata) GetLength() int32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *SongMetadata) GetIsLocal() bool {
	if m != nil && m.IsLocal != nil {
		return *m.IsLocal
	}
	return false
}

func (m *SongMetadata) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *SongMetadata) GetFileSize() int32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *SongMetadata) GetRating() float32 {
	if m != nil && m.Rating != nil {
		return *m.Rating
	}
	return 0
}

// Playlist informations
type Playlist struct {
	Id               *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ItemCount        *int32  `protobuf:"varint,3,opt,name=item_count" json:"item_count,omitempty"`
	Active           *bool   `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	Closed           *bool   `protobuf:"varint,5,opt,name=closed" json:"closed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Playlist) Reset()         { *m = Playlist{} }
func (m *Playlist) String() string { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()    {}

func (m *Playlist) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Playlist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Playlist) GetItemCount() int32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

func (m *Playlist) GetActive() bool {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return false
}

func (m *Playlist) GetClosed() bool {
	if m != nil && m.Closed != nil {
		return *m.Closed
	}
	return false
}

type RequestPlaylists struct {
	IncludeClosed    *bool  `protobuf:"varint,1,opt,name=include_closed" json:"include_closed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestPlaylists) Reset()         { *m = RequestPlaylists{} }
func (m *RequestPlaylists) String() string { return proto.CompactTextString(m) }
func (*RequestPlaylists) ProtoMessage()    {}

func (m *RequestPlaylists) GetIncludeClosed() bool {
	if m != nil && m.IncludeClosed != nil {
		return *m.IncludeClosed
	}
	return false
}

// A Client requests songs from a specific playlist
type RequestPlaylistSongs struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestPlaylistSongs) Reset()         { *m = RequestPlaylistSongs{} }
func (m *RequestPlaylistSongs) String() string { return proto.CompactTextString(m) }
func (*RequestPlaylistSongs) ProtoMessage()    {}

func (m *RequestPlaylistSongs) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// Client want to change track
type RequestChangeSong struct {
	// In which playlist is the song?
	PlaylistId *int32 `protobuf:"varint,1,opt,name=playlist_id" json:"playlist_id,omitempty"`
	// And on which position?
	SongIndex        *int32 `protobuf:"varint,2,opt,name=song_index" json:"song_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestChangeSong) Reset()         { *m = RequestChangeSong{} }
func (m *RequestChangeSong) String() string { return proto.CompactTextString(m) }
func (*RequestChangeSong) ProtoMessage()    {}

func (m *RequestChangeSong) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

func (m *RequestChangeSong) GetSongIndex() int32 {
	if m != nil && m.SongIndex != nil {
		return *m.SongIndex
	}
	return 0
}

// Set the volume
type RequestSetVolume struct {
	Volume           *int32 `protobuf:"varint,1,opt,name=volume" json:"volume,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestSetVolume) Reset()         { *m = RequestSetVolume{} }
func (m *RequestSetVolume) String() string { return proto.CompactTextString(m) }
func (*RequestSetVolume) ProtoMessage()    {}

func (m *RequestSetVolume) GetVolume() int32 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

// Repeat and Random messages
type Repeat struct {
	RepeatMode       *RepeatMode `protobuf:"varint,1,opt,name=repeat_mode,enum=pb.remote.RepeatMode" json:"repeat_mode,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Repeat) Reset()         { *m = Repeat{} }
func (m *Repeat) String() string { return proto.CompactTextString(m) }
func (*Repeat) ProtoMessage()    {}

func (m *Repeat) GetRepeatMode() RepeatMode {
	if m != nil && m.RepeatMode != nil {
		return *m.RepeatMode
	}
	return RepeatMode_Repeat_Off
}

type Shuffle struct {
	ShuffleMode      *ShuffleMode `protobuf:"varint,1,opt,name=shuffle_mode,enum=pb.remote.ShuffleMode" json:"shuffle_mode,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Shuffle) Reset()         { *m = Shuffle{} }
func (m *Shuffle) String() string { return proto.CompactTextString(m) }
func (*Shuffle) ProtoMessage()    {}

func (m *Shuffle) GetShuffleMode() ShuffleMode {
	if m != nil && m.ShuffleMode != nil {
		return *m.ShuffleMode
	}
	return ShuffleMode_Shuffle_Off
}

// Response from server
// General info
type ResponseClementineInfo struct {
	Version          *string      `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	State            *EngineState `protobuf:"varint,2,opt,name=state,enum=pb.remote.EngineState" json:"state,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResponseClementineInfo) Reset()         { *m = ResponseClementineInfo{} }
func (m *ResponseClementineInfo) String() string { return proto.CompactTextString(m) }
func (*ResponseClementineInfo) ProtoMessage()    {}

func (m *ResponseClementineInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ResponseClementineInfo) GetState() EngineState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return EngineState_Empty
}

// The current song played
type ResponseCurrentMetadata struct {
	SongMetadata     *SongMetadata `protobuf:"bytes,1,opt,name=song_metadata" json:"song_metadata,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ResponseCurrentMetadata) Reset()         { *m = ResponseCurrentMetadata{} }
func (m *ResponseCurrentMetadata) String() string { return proto.CompactTextString(m) }
func (*ResponseCurrentMetadata) ProtoMessage()    {}

func (m *ResponseCurrentMetadata) GetSongMetadata() *SongMetadata {
	if m != nil {
		return m.SongMetadata
	}
	return nil
}

// The playlists in clementine
type ResponsePlaylists struct {
	Playlist         []*Playlist `protobuf:"bytes,1,rep,name=playlist" json:"playlist,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ResponsePlaylists) Reset()         { *m = ResponsePlaylists{} }
func (m *ResponsePlaylists) String() string { return proto.CompactTextString(m) }
func (*ResponsePlaylists) ProtoMessage()    {}

func (m *ResponsePlaylists) GetPlaylist() []*Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

// A list of songs in a playlist
type ResponsePlaylistSongs struct {
	RequestedPlaylist *Playlist `protobuf:"bytes,1,opt,name=requested_playlist" json:"requested_playlist,omitempty"`
	// The songs that are in the playlist
	Songs            []*SongMetadata `protobuf:"bytes,2,rep,name=songs" json:"songs,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ResponsePlaylistSongs) Reset()         { *m = ResponsePlaylistSongs{} }
func (m *ResponsePlaylistSongs) String() string { return proto.CompactTextString(m) }
func (*ResponsePlaylistSongs) ProtoMessage()    {}

func (m *ResponsePlaylistSongs) GetRequestedPlaylist() *Playlist {
	if m != nil {
		return m.RequestedPlaylist
	}
	return nil
}

func (m *ResponsePlaylistSongs) GetSongs() []*SongMetadata {
	if m != nil {
		return m.Songs
	}
	return nil
}

// The current state of the play engine
type ResponseEngineStateChanged struct {
	State            *EngineState `protobuf:"varint,1,opt,name=state,enum=pb.remote.EngineState" json:"state,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResponseEngineStateChanged) Reset()         { *m = ResponseEngineStateChanged{} }
func (m *ResponseEngineStateChanged) String() string { return proto.CompactTextString(m) }
func (*ResponseEngineStateChanged) ProtoMessage()    {}

func (m *ResponseEngineStateChanged) GetState() EngineState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return EngineState_Empty
}

// Sends the current position of the track
type ResponseUpdateTrackPosition struct {
	Position         *int32 `protobuf:"varint,1,opt,name=position" json:"position,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResponseUpdateTrackPosition) Reset()         { *m = ResponseUpdateTrackPosition{} }
func (m *ResponseUpdateTrackPosition) String() string { return proto.CompactTextString(m) }
func (*ResponseUpdateTrackPosition) ProtoMessage()    {}

func (m *ResponseUpdateTrackPosition) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

// The connect message containing the authentication code
type RequestConnect struct {
	AuthCode          *int32 `protobuf:"varint,1,opt,name=auth_code" json:"auth_code,omitempty"`
	SendPlaylistSongs *bool  `protobuf:"varint,2,opt,name=send_playlist_songs" json:"send_playlist_songs,omitempty"`
	Downloader        *bool  `protobuf:"varint,3,opt,name=downloader" json:"downloader,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *RequestConnect) Reset()         { *m = RequestConnect{} }
func (m *RequestConnect) String() string { return proto.CompactTextString(m) }
func (*RequestConnect) ProtoMessage()    {}

func (m *RequestConnect) GetAuthCode() int32 {
	if m != nil && m.AuthCode != nil {
		return *m.AuthCode
	}
	return 0
}

func (m *RequestConnect) GetSendPlaylistSongs() bool {
	if m != nil && m.SendPlaylistSongs != nil {
		return *m.SendPlaylistSongs
	}
	return false
}

func (m *RequestConnect) GetDownloader() bool {
	if m != nil && m.Downloader != nil {
		return *m.Downloader
	}
	return false
}

type ResponseDisconnect struct {
	ReasonDisconnect *ReasonDisconnect `protobuf:"varint,1,opt,name=reason_disconnect,enum=pb.remote.ReasonDisconnect" json:"reason_disconnect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ResponseDisconnect) Reset()         { *m = ResponseDisconnect{} }
func (m *ResponseDisconnect) String() string { return proto.CompactTextString(m) }
func (*ResponseDisconnect) ProtoMessage()    {}

func (m *ResponseDisconnect) GetReasonDisconnect() ReasonDisconnect {
	if m != nil && m.ReasonDisconnect != nil {
		return *m.ReasonDisconnect
	}
	return ReasonDisconnect_Server_Shutdown
}

type ResponseActiveChanged struct {
	Id               *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResponseActiveChanged) Reset()         { *m = ResponseActiveChanged{} }
func (m *ResponseActiveChanged) String() string { return proto.CompactTextString(m) }
func (*ResponseActiveChanged) ProtoMessage()    {}

func (m *ResponseActiveChanged) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// A client requests a new track position
// position in seconds!
type RequestSetTrackPosition struct {
	Position         *int32 `protobuf:"varint,1,opt,name=position" json:"position,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestSetTrackPosition) Reset()         { *m = RequestSetTrackPosition{} }
func (m *RequestSetTrackPosition) String() string { return proto.CompactTextString(m) }
func (*RequestSetTrackPosition) ProtoMessage()    {}

func (m *RequestSetTrackPosition) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

type RequestInsertUrls struct {
	// In which playlist should the urls be inserted?
	PlaylistId       *int32   `protobuf:"varint,1,opt,name=playlist_id" json:"playlist_id,omitempty"`
	Urls             []string `protobuf:"bytes,2,rep,name=urls" json:"urls,omitempty"`
	Position         *int32   `protobuf:"varint,3,opt,name=position,def=-1" json:"position,omitempty"`
	PlayNow          *bool    `protobuf:"varint,4,opt,name=play_now,def=0" json:"play_now,omitempty"`
	Enqueue          *bool    `protobuf:"varint,5,opt,name=enqueue,def=0" json:"enqueue,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RequestInsertUrls) Reset()         { *m = RequestInsertUrls{} }
func (m *RequestInsertUrls) String() string { return proto.CompactTextString(m) }
func (*RequestInsertUrls) ProtoMessage()    {}

const Default_RequestInsertUrls_Position int32 = -1
const Default_RequestInsertUrls_PlayNow bool = false
const Default_RequestInsertUrls_Enqueue bool = false

func (m *RequestInsertUrls) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

func (m *RequestInsertUrls) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *RequestInsertUrls) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return Default_RequestInsertUrls_Position
}

func (m *RequestInsertUrls) GetPlayNow() bool {
	if m != nil && m.PlayNow != nil {
		return *m.PlayNow
	}
	return Default_RequestInsertUrls_PlayNow
}

func (m *RequestInsertUrls) GetEnqueue() bool {
	if m != nil && m.Enqueue != nil {
		return *m.Enqueue
	}
	return Default_RequestInsertUrls_Enqueue
}

// Client want to change track
type RequestRemoveSongs struct {
	// In which playlist is the songs?
	PlaylistId *int32 `protobuf:"varint,1,opt,name=playlist_id" json:"playlist_id,omitempty"`
	// And on which position?
	Songs            []int32 `protobuf:"varint,2,rep,name=songs" json:"songs,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestRemoveSongs) Reset()         { *m = RequestRemoveSongs{} }
func (m *RequestRemoveSongs) String() string { return proto.CompactTextString(m) }
func (*RequestRemoveSongs) ProtoMessage()    {}

func (m *RequestRemoveSongs) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

func (m *RequestRemoveSongs) GetSongs() []int32 {
	if m != nil {
		return m.Songs
	}
	return nil
}

// Messages for opening / closing playlists
type RequestOpenPlaylist struct {
	PlaylistId       *int32 `protobuf:"varint,1,opt,name=playlist_id" json:"playlist_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestOpenPlaylist) Reset()         { *m = RequestOpenPlaylist{} }
func (m *RequestOpenPlaylist) String() string { return proto.CompactTextString(m) }
func (*RequestOpenPlaylist) ProtoMessage()    {}

func (m *RequestOpenPlaylist) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

type RequestClosePlaylist struct {
	PlaylistId       *int32 `protobuf:"varint,1,opt,name=playlist_id" json:"playlist_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestClosePlaylist) Reset()         { *m = RequestClosePlaylist{} }
func (m *RequestClosePlaylist) String() string { return proto.CompactTextString(m) }
func (*RequestClosePlaylist) ProtoMessage()    {}

func (m *RequestClosePlaylist) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

// Message containing lyrics
type ResponseLyrics struct {
	Lyrics           []*Lyric `protobuf:"bytes,1,rep,name=lyrics" json:"lyrics,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ResponseLyrics) Reset()         { *m = ResponseLyrics{} }
func (m *ResponseLyrics) String() string { return proto.CompactTextString(m) }
func (*ResponseLyrics) ProtoMessage()    {}

func (m *ResponseLyrics) GetLyrics() []*Lyric {
	if m != nil {
		return m.Lyrics
	}
	return nil
}

type Lyric struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title            *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content          *string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Lyric) Reset()         { *m = Lyric{} }
func (m *Lyric) String() string { return proto.CompactTextString(m) }
func (*Lyric) ProtoMessage()    {}

func (m *Lyric) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Lyric) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *Lyric) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

type RequestDownloadSongs struct {
	DownloadItem     *DownloadItem `protobuf:"varint,1,opt,name=download_item,enum=pb.remote.DownloadItem" json:"download_item,omitempty"`
	PlaylistId       *int32        `protobuf:"varint,2,opt,name=playlist_id" json:"playlist_id,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RequestDownloadSongs) Reset()         { *m = RequestDownloadSongs{} }
func (m *RequestDownloadSongs) String() string { return proto.CompactTextString(m) }
func (*RequestDownloadSongs) ProtoMessage()    {}

func (m *RequestDownloadSongs) GetDownloadItem() DownloadItem {
	if m != nil && m.DownloadItem != nil {
		return *m.DownloadItem
	}
	return DownloadItem_CurrentItem
}

func (m *RequestDownloadSongs) GetPlaylistId() int32 {
	if m != nil && m.PlaylistId != nil {
		return *m.PlaylistId
	}
	return 0
}

type ResponseSongFileChunk struct {
	ChunkNumber      *int32        `protobuf:"varint,1,opt,name=chunk_number" json:"chunk_number,omitempty"`
	ChunkCount       *int32        `protobuf:"varint,2,opt,name=chunk_count" json:"chunk_count,omitempty"`
	FileNumber       *int32        `protobuf:"varint,3,opt,name=file_number" json:"file_number,omitempty"`
	FileCount        *int32        `protobuf:"varint,4,opt,name=file_count" json:"file_count,omitempty"`
	SongMetadata     *SongMetadata `protobuf:"bytes,6,opt,name=song_metadata" json:"song_metadata,omitempty"`
	Data             []byte        `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	Size             *int32        `protobuf:"varint,8,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ResponseSongFileChunk) Reset()         { *m = ResponseSongFileChunk{} }
func (m *ResponseSongFileChunk) String() string { return proto.CompactTextString(m) }
func (*ResponseSongFileChunk) ProtoMessage()    {}

func (m *ResponseSongFileChunk) GetChunkNumber() int32 {
	if m != nil && m.ChunkNumber != nil {
		return *m.ChunkNumber
	}
	return 0
}

func (m *ResponseSongFileChunk) GetChunkCount() int32 {
	if m != nil && m.ChunkCount != nil {
		return *m.ChunkCount
	}
	return 0
}

func (m *ResponseSongFileChunk) GetFileNumber() int32 {
	if m != nil && m.FileNumber != nil {
		return *m.FileNumber
	}
	return 0
}

func (m *ResponseSongFileChunk) GetFileCount() int32 {
	if m != nil && m.FileCount != nil {
		return *m.FileCount
	}
	return 0
}

func (m *ResponseSongFileChunk) GetSongMetadata() *SongMetadata {
	if m != nil {
		return m.SongMetadata
	}
	return nil
}

func (m *ResponseSongFileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ResponseSongFileChunk) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type ResponseLibraryChunk struct {
	ChunkNumber      *int32 `protobuf:"varint,1,opt,name=chunk_number" json:"chunk_number,omitempty"`
	ChunkCount       *int32 `protobuf:"varint,2,opt,name=chunk_count" json:"chunk_count,omitempty"`
	Data             []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Size             *int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResponseLibraryChunk) Reset()         { *m = ResponseLibraryChunk{} }
func (m *ResponseLibraryChunk) String() string { return proto.CompactTextString(m) }
func (*ResponseLibraryChunk) ProtoMessage()    {}

func (m *ResponseLibraryChunk) GetChunkNumber() int32 {
	if m != nil && m.ChunkNumber != nil {
		return *m.ChunkNumber
	}
	return 0
}

func (m *ResponseLibraryChunk) GetChunkCount() int32 {
	if m != nil && m.ChunkCount != nil {
		return *m.ChunkCount
	}
	return 0
}

func (m *ResponseLibraryChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ResponseLibraryChunk) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type ResponseSongOffer struct {
	Accepted         *bool  `protobuf:"varint,1,opt,name=accepted" json:"accepted,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ResponseSongOffer) Reset()         { *m = ResponseSongOffer{} }
func (m *ResponseSongOffer) String() string { return proto.CompactTextString(m) }
func (*ResponseSongOffer) ProtoMessage()    {}

func (m *ResponseSongOffer) GetAccepted() bool {
	if m != nil && m.Accepted != nil {
		return *m.Accepted
	}
	return false
}

type RequestRateSong struct {
	Rating           *float32 `protobuf:"fixed32,1,opt,name=rating" json:"rating,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RequestRateSong) Reset()         { *m = RequestRateSong{} }
func (m *RequestRateSong) String() string { return proto.CompactTextString(m) }
func (*RequestRateSong) ProtoMessage()    {}

func (m *RequestRateSong) GetRating() float32 {
	if m != nil && m.Rating != nil {
		return *m.Rating
	}
	return 0
}

// The message itself
type Message struct {
	Version                     *int32                       `protobuf:"varint,1,opt,name=version,def=11" json:"version,omitempty"`
	Type                        *MsgType                     `protobuf:"varint,2,opt,name=type,enum=pb.remote.MsgType,def=0" json:"type,omitempty"`
	RequestConnect              *RequestConnect              `protobuf:"bytes,21,opt,name=request_connect" json:"request_connect,omitempty"`
	RequestPlaylists            *RequestPlaylists            `protobuf:"bytes,27,opt,name=request_playlists" json:"request_playlists,omitempty"`
	RequestPlaylistSongs        *RequestPlaylistSongs        `protobuf:"bytes,10,opt,name=request_playlist_songs" json:"request_playlist_songs,omitempty"`
	RequestChangeSong           *RequestChangeSong           `protobuf:"bytes,11,opt,name=request_change_song" json:"request_change_song,omitempty"`
	RequestSetVolume            *RequestSetVolume            `protobuf:"bytes,12,opt,name=request_set_volume" json:"request_set_volume,omitempty"`
	RequestSetTrackPosition     *RequestSetTrackPosition     `protobuf:"bytes,23,opt,name=request_set_track_position" json:"request_set_track_position,omitempty"`
	RequestInsertUrls           *RequestInsertUrls           `protobuf:"bytes,25,opt,name=request_insert_urls" json:"request_insert_urls,omitempty"`
	RequestRemoveSongs          *RequestRemoveSongs          `protobuf:"bytes,26,opt,name=request_remove_songs" json:"request_remove_songs,omitempty"`
	RequestOpenPlaylist         *RequestOpenPlaylist         `protobuf:"bytes,28,opt,name=request_open_playlist" json:"request_open_playlist,omitempty"`
	RequestClosePlaylist        *RequestClosePlaylist        `protobuf:"bytes,29,opt,name=request_close_playlist" json:"request_close_playlist,omitempty"`
	RequestDownloadSongs        *RequestDownloadSongs        `protobuf:"bytes,31,opt,name=request_download_songs" json:"request_download_songs,omitempty"`
	RequestRateSong             *RequestRateSong             `protobuf:"bytes,35,opt,name=request_rate_song" json:"request_rate_song,omitempty"`
	Repeat                      *Repeat                      `protobuf:"bytes,13,opt,name=repeat" json:"repeat,omitempty"`
	Shuffle                     *Shuffle                     `protobuf:"bytes,14,opt,name=shuffle" json:"shuffle,omitempty"`
	ResponseClementineInfo      *ResponseClementineInfo      `protobuf:"bytes,15,opt,name=response_clementine_info" json:"response_clementine_info,omitempty"`
	ResponseCurrentMetadata     *ResponseCurrentMetadata     `protobuf:"bytes,16,opt,name=response_current_metadata" json:"response_current_metadata,omitempty"`
	ResponsePlaylists           *ResponsePlaylists           `protobuf:"bytes,17,opt,name=response_playlists" json:"response_playlists,omitempty"`
	ResponsePlaylistSongs       *ResponsePlaylistSongs       `protobuf:"bytes,18,opt,name=response_playlist_songs" json:"response_playlist_songs,omitempty"`
	ResponseEngineStateChanged  *ResponseEngineStateChanged  `protobuf:"bytes,19,opt,name=response_engine_state_changed" json:"response_engine_state_changed,omitempty"`
	ResponseUpdateTrackPosition *ResponseUpdateTrackPosition `protobuf:"bytes,20,opt,name=response_update_track_position" json:"response_update_track_position,omitempty"`
	ResponseDisconnect          *ResponseDisconnect          `protobuf:"bytes,22,opt,name=response_disconnect" json:"response_disconnect,omitempty"`
	ResponseActiveChanged       *ResponseActiveChanged       `protobuf:"bytes,24,opt,name=response_active_changed" json:"response_active_changed,omitempty"`
	ResponseLyrics              *ResponseLyrics              `protobuf:"bytes,30,opt,name=response_lyrics" json:"response_lyrics,omitempty"`
	ResponseSongFileChunk       *ResponseSongFileChunk       `protobuf:"bytes,32,opt,name=response_song_file_chunk" json:"response_song_file_chunk,omitempty"`
	ResponseSongOffer           *ResponseSongOffer           `protobuf:"bytes,33,opt,name=response_song_offer" json:"response_song_offer,omitempty"`
	ResponseLibraryChunk        *ResponseLibraryChunk        `protobuf:"bytes,34,opt,name=response_library_chunk" json:"response_library_chunk,omitempty"`
	XXX_unrecognized            []byte                       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

const Default_Message_Version int32 = 11
const Default_Message_Type MsgType = MsgType_UNKNOWN

func (m *Message) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_Message_Version
}

func (m *Message) GetType() MsgType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Message_Type
}

func (m *Message) GetRequestConnect() *RequestConnect {
	if m != nil {
		return m.RequestConnect
	}
	return nil
}

func (m *Message) GetRequestPlaylists() *RequestPlaylists {
	if m != nil {
		return m.RequestPlaylists
	}
	return nil
}

func (m *Message) GetRequestPlaylistSongs() *RequestPlaylistSongs {
	if m != nil {
		return m.RequestPlaylistSongs
	}
	return nil
}

func (m *Message) GetRequestChangeSong() *RequestChangeSong {
	if m != nil {
		return m.RequestChangeSong
	}
	return nil
}

func (m *Message) GetRequestSetVolume() *RequestSetVolume {
	if m != nil {
		return m.RequestSetVolume
	}
	return nil
}

func (m *Message) GetRequestSetTrackPosition() *RequestSetTrackPosition {
	if m != nil {
		return m.RequestSetTrackPosition
	}
	return nil
}

func (m *Message) GetRequestInsertUrls() *RequestInsertUrls {
	if m != nil {
		return m.RequestInsertUrls
	}
	return nil
}

func (m *Message) GetRequestRemoveSongs() *RequestRemoveSongs {
	if m != nil {
		return m.RequestRemoveSongs
	}
	return nil
}

func (m *Message) GetRequestOpenPlaylist() *RequestOpenPlaylist {
	if m != nil {
		return m.RequestOpenPlaylist
	}
	return nil
}

func (m *Message) GetRequestClosePlaylist() *RequestClosePlaylist {
	if m != nil {
		return m.RequestClosePlaylist
	}
	return nil
}

func (m *Message) GetRequestDownloadSongs() *RequestDownloadSongs {
	if m != nil {
		return m.RequestDownloadSongs
	}
	return nil
}

func (m *Message) GetRequestRateSong() *RequestRateSong {
	if m != nil {
		return m.RequestRateSong
	}
	return nil
}

func (m *Message) GetRepeat() *Repeat {
	if m != nil {
		return m.Repeat
	}
	return nil
}

func (m *Message) GetShuffle() *Shuffle {
	if m != nil {
		return m.Shuffle
	}
	return nil
}

func (m *Message) GetResponseClementineInfo() *ResponseClementineInfo {
	if m != nil {
		return m.ResponseClementineInfo
	}
	return nil
}

func (m *Message) GetResponseCurrentMetadata() *ResponseCurrentMetadata {
	if m != nil {
		return m.ResponseCurrentMetadata
	}
	return nil
}

func (m *Message) GetResponsePlaylists() *ResponsePlaylists {
	if m != nil {
		return m.ResponsePlaylists
	}
	return nil
}

func (m *Message) GetResponsePlaylistSongs() *ResponsePlaylistSongs {
	if m != nil {
		return m.ResponsePlaylistSongs
	}
	return nil
}

func (m *Message) GetResponseEngineStateChanged() *ResponseEngineStateChanged {
	if m != nil {
		return m.ResponseEngineStateChanged
	}
	return nil
}

func (m *Message) GetResponseUpdateTrackPosition() *ResponseUpdateTrackPosition {
	if m != nil {
		return m.ResponseUpdateTrackPosition
	}
	return nil
}

func (m *Message) GetResponseDisconnect() *ResponseDisconnect {
	if m != nil {
		return m.ResponseDisconnect
	}
	return nil
}

func (m *Message) GetResponseActiveChanged() *ResponseActiveChanged {
	if m != nil {
		return m.ResponseActiveChanged
	}
	return nil
}

func (m *Message) GetResponseLyrics() *ResponseLyrics {
	if m != nil {
		return m.ResponseLyrics
	}
	return nil
}

func (m *Message) GetResponseSongFileChunk() *ResponseSongFileChunk {
	if m != nil {
		return m.ResponseSongFileChunk
	}
	return nil
}

func (m *Message) GetResponseSongOffer() *ResponseSongOffer {
	if m != nil {
		return m.ResponseSongOffer
	}
	return nil
}

func (m *Message) GetResponseLibraryChunk() *ResponseLibraryChunk {
	if m != nil {
		return m.ResponseLibraryChunk
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.remote.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("pb.remote.EngineState", EngineState_name, EngineState_value)
	proto.RegisterEnum("pb.remote.RepeatMode", RepeatMode_name, RepeatMode_value)
	proto.RegisterEnum("pb.remote.ShuffleMode", ShuffleMode_name, ShuffleMode_value)
	proto.RegisterEnum("pb.remote.ReasonDisconnect", ReasonDisconnect_name, ReasonDisconnect_value)
	proto.RegisterEnum("pb.remote.DownloadItem", DownloadItem_name, DownloadItem_value)
}
